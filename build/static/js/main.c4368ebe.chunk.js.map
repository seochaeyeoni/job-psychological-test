{"version":3,"sources":["styles/fonts/NanumGothic.woff","styles/fonts/fonts.js","styles/globalStyles.js","components/Button.js","components/Input.js","components/RadioButton.js","atom.js","routes/Home.js","components/ProgressBar.js","components/ExampleQuestion.js","api/career.js","routes/Example.js","components/Question.js","routes/Test.js","constants/index.js","routes/Finish.js","components/Chart.js","components/UserTable.js","components/JobMajorTable.js","routes/Result.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalFonts","createGlobalStyle","NanumGothic","GlobalStyle","Outer","styled","div","TestOuter","Inner","Button","name","disabled","onClick","style","minWidth","textAlign","display","margin","marginTop","fontFamily","type","class","Input","onChange","maxWidth","placeholder","aria-label","e","target","value","width","padding","fontSize","RadioButton","hiddenValue","group","answer","className","checked","id","for","userState","atom","key","default","gender","createdAt","questionState","question","answer01","answer02","answerScore01","answerScore02","wonScoreState","jobState","majorState","Home","history","useHistory","useState","status","setStatus","useRecoilState","user","setUser","useEffect","radioChange","temp","console","log","today","Date","test","toLocaleString","push","alert","ProgressBar","percent","float","role","aria-valuenow","aria-valuemin","aria-valuemax","ExampleQuestion","Question","value1","value2","apiKey","api","axios","create","baseURL","headers","getQuestions","a","get","params","apikey","q","res","parseQuestions","data","RESULT","Error","ERROR_REASON","result","map","elem","getResult","body","storeWonscores","storeJobs","storeMajors","gotoFinish","postReport","url","getWonScore","values","Promise","all","getAverageJobs","getAverageMajors","jobs","majors","post","JSON","stringify","replace","parseWonScore","wonScore","unordered","split","forEach","index","slice","ordered","Object","keys","sort","first","second","result1","result2","no1","no2","Example","setQuestion","then","hiddenValue1","hiddenValue2","fontWeight","Test","questionValue","useRecoilValue","setWonScore","setJob","setMajor","Array","fill","answerList","setAnswerList","page","setPage","progress","setProgress","includes","newAnswerList","c","i","parseInt","filter","length","getReport","answers","join","qestrnSeq","trgetSe","startDtm","wonScores","interpretationNames","educationLevelNames","majorNames","Finish","wonScoreValue","orderedWonscore","prevResult","Chart","labels","datasets","borderWidth","datas","backgroundColor","options","legend","scales","yAxes","ticks","min","stepSize","maintainAspectRatio","height","UserTable","userValue","scope","JobMajorTable","col","row","href","jobValue","majorValue","resetUser","useResetRecoilState","resetWonScore","resetJob","resetMajor","jobMajorCol","parseJobMajor","names","dict","0","1","2","3","4","5","6","7","entries","Number","App","exact","path","component","Result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4368ebe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NanumGothic.f727c12e.woff\";","import { createGlobalStyle } from 'styled-components';\r\nimport NanumGothic from './NanumGothic.woff';\r\n\r\nconst GlobalFonts = createGlobalStyle`\r\n    @font-face {\r\n        font-family: \"NanumGothic\";\r\n        src: local(\"NanumGothic\"),\r\n        url(${NanumGothic}) format('woff');\r\n        font-weight: 300;\r\n        font-style: normal;\r\n    }\r\n`;\r\n\r\nexport default GlobalFonts;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  h1 {\r\n    font-family: 'NanumGothic';\r\n    font-weight: bold;\r\n    padding: 12px;\r\n  }\r\n  h2, h3, h4 {\r\n    font-family: 'NanumGothic';\r\n    font-weight: bold;\r\n    padding: 10px;\r\n  }\r\n\r\n  h5, p, th, td {\r\n    font-family: 'NanumGothic';\r\n    padding-top: 20px;\r\n    padding-bottom: 3px;\r\n  }\r\n\r\n  a {\r\n    font-family: 'NanumGothic';\r\n    margin-top: 20px;\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const Outer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 800px;\r\n  background-color: aliceblue;\r\n`;\r\n\r\nexport const TestOuter = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  background-color: aliceblue;\r\n`;\r\n\r\nexport const Inner = styled.div`\r\n  text-align: center;\r\n  width: 80%;\r\n  height: 70%;\r\n  padding-top: 5%;\r\n  padding-left: 10%;\r\n  padding-right: 10%;\r\n  background-color: white;\r\n  padding-bottom: 5%;\r\n  border-radius: 15px;\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nconst Button = ({ name, disabled, onClick }) => {\r\n  return (\r\n    <button style={{\r\n      minWidth: '150px',\r\n      textAlign: 'center',\r\n      display: 'inline-block',\r\n      margin: '20px',\r\n      marginTop: '50px',\r\n      fontFamily: 'NanumGothic',\r\n    }} type=\"button\" class=\"btn btn-lg btn-primary\" disabled={disabled} onClick={onClick}>\r\n      {name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","const Input = ({ onChange }) => {\r\n  const inputChange = e => {\r\n    onChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        style={{\r\n          maxWidth: '350px',\r\n          textAlign: 'center',\r\n          display: 'inline-block',\r\n          margin: '5px',\r\n          fontFamily: 'NanumGothic',\r\n        }}\r\n        class=\"form-control\"\r\n        type=\"text\"\r\n        placeholder=\"이름\"\r\n        aria-label=\"default input example\"\r\n        onChange={inputChange}\r\n      />\r\n      <p style={{ width: '100%', textAlign: 'center', padding: '0px', fontSize: '10pt' }}>\r\n        👉이름은 한글 2~4자 이내로 입력해주세요👈\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\nconst RadioButton = ({ value, hiddenValue, group, answer, onChange }) => {\r\n  const radioChange = e => {\r\n    onChange(group, e.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"form-check\"\r\n        style={{\r\n          maxWidth: '150px',\r\n          textAlign: 'center',\r\n          display: 'inline-block',\r\n          margin: '15px',\r\n          fontFamily: 'NanumGothic',\r\n        }}\r\n      >\r\n        <input\r\n          checked={answer}\r\n          value={hiddenValue}\r\n          class=\"form-check-input\"\r\n          type=\"radio\"\r\n          name={group}\r\n          id=\"flexRadioDefault1\"\r\n          onChange={radioChange}\r\n        />\r\n        <label class=\"form-check-label\" for=\"flexRadioDefault1\">\r\n          {value}\r\n        </label>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RadioButton;\r\n","import { atom } from 'recoil';\r\n\r\nexport const userState = atom({\r\n  key: 'userState',\r\n  default: {\r\n    name: '',\r\n    gender: '',\r\n    createdAt: '',\r\n  },\r\n});\r\n\r\nexport const questionState = atom({\r\n  key: 'questionState',\r\n  default: [\r\n    {\r\n      question: '',\r\n      answer01: '',\r\n      answer02: '',\r\n      answerScore01: '',\r\n      answerScore02: '',\r\n    },\r\n  ],\r\n});\r\n\r\nexport const wonScoreState = atom({\r\n  key: 'wonScoreState',\r\n  default: {},\r\n});\r\n\r\nexport const jobState = atom({\r\n  key: 'jobState',\r\n  default: [],\r\n});\r\n\r\nexport const majorState = atom({\r\n  key: 'majorState',\r\n  default: [],\r\n});\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '../components/Button';\r\nimport Input from '../components/Input';\r\nimport RadioButton from '../components/RadioButton';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useRecoilState } from 'recoil';\r\nimport { userState } from '../atom';\r\nimport { Outer, Inner } from '../styles/globalStyles';\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  const [status, setStatus] = useState(true);\r\n  const [user, setUser] = useRecoilState(userState);\r\n\r\n  useEffect(() => {\r\n    setStatus(!user.gender || !user.name);\r\n  }, [user.gender, user.name]);\r\n\r\n  const validator = value => {\r\n    const reg = /^[가-힣]{2,4}$/;\r\n    return reg.test(value);\r\n  };\r\n\r\n  const checkUser = () => {\r\n    let today = new Date();\r\n    console.log('checkUser');\r\n    const msg = '한글 이름 2~4자 이내로 입력해주세요';\r\n    if (!validator(user.name)) alert(msg);\r\n    else {\r\n      const temp = { ...user };\r\n      temp.createdAt = today.toLocaleString();\r\n      setUser(temp);\r\n      history.push('/example');\r\n    }\r\n  };\r\n\r\n  const inputChange = value => {\r\n    const temp = { ...user };\r\n    temp.name = value;\r\n    setUser(temp);\r\n  };\r\n\r\n  const radioChange = (group, value) => {\r\n    const temp = { ...user };\r\n    console.log(value)\r\n    temp.gender = value;\r\n    setUser(temp);\r\n  };\r\n\r\n\r\n  return (\r\n    <Outer>\r\n      <Inner>\r\n        <h1>📊직업가치관검사✅</h1>\r\n        <h5>이름</h5>\r\n        <Input onChange={inputChange} />\r\n        <h5>성별</h5>\r\n        <RadioButton value=\"🙆‍♂️남자\" group=\"gender\" hiddenValue=\"남자\" onChange={radioChange} />\r\n        <RadioButton value=\"🙆‍♀️여자\" group=\"gender\" hiddenValue=\"여자\" onChange={radioChange} />\r\n        <div></div>\r\n        <Button name=\"검사시작\" disabled={status} onClick={checkUser} />\r\n      </Inner>\r\n    </Outer>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","const ProgressBar = ({ percent }) => {\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{display: \"inline\", float: \"left\"}}>검사예시</h2>\r\n      <h2 style={{display: \"inline\", float: \"right\"}}>{percent}%</h2>\r\n      <div style={{display: \"inline-block\", width: \"100%\"}}></div>\r\n      <div class=\"progress\" >\r\n        <div\r\n          class=\"progress-bar progress-bar-striped progress-bar-animated\"\r\n          role=\"progressbar\"\r\n          aria-valuenow=\"75\"\r\n          aria-valuemin=\"0\"\r\n          aria-valuemax=\"100\"\r\n          style={{width: percent+\"%\"}}\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import RadioButton from './RadioButton';\r\n\r\nconst ExampleQuestion = ({\r\n  Question,\r\n  value1,\r\n  value2,\r\n  group,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h4>{Question}</h4>\r\n      <RadioButton\r\n        value={value1}\r\n        group={group}\r\n        onChange={onClick}\r\n      />\r\n      <RadioButton\r\n        value={value2}\r\n        group={group}\r\n        onChange={onClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExampleQuestion;\r\n","import axios from 'axios';\r\n\r\nconst apiKey = '1a73b7811fcb787af6e72020f85b4c4a';\r\nconst BASE_URL = 'https://www.career.go.kr/inspct/openapi/test';\r\n\r\nconst api = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\nexport const getQuestions = async () => {\r\n  const res = await api.get('/questions', {\r\n    params: { apikey: apiKey, q: 6 },\r\n  });\r\n  try {\r\n    return parseQuestions(res.data.RESULT);\r\n  } catch {\r\n    alert(Error(res.ERROR_REASON));\r\n  }\r\n};\r\n\r\nconst parseQuestions = result => {\r\n  return result.map(elem => ({\r\n    question: elem.question,\r\n    answer01: elem.answer01,\r\n    answer02: elem.answer02,\r\n    answerScore01: elem.answerScore01,\r\n    answerScore02: elem.answerScore02,\r\n  }));\r\n};\r\n\r\nexport const getResult = async (body, storeWonscores, storeJobs, storeMajors, gotoFinish) => {\r\n  const url =  await postReport(body);\r\n  const values = await getWonScore(url);\r\n  storeWonscores(values[0])\r\n  const [jobs, majors] = await Promise.all([\r\n    getAverageJobs(values[1], values[2]),\r\n    getAverageMajors(values[1], values[2])\r\n  ])\r\n  storeJobs(jobs);\r\n  storeMajors(majors);\r\n  gotoFinish();\r\n};\r\n\r\nconst postReport = async data => {\r\n  const res = await api.post('/report', JSON.stringify({ apikey: apiKey, ...data }));\r\n  try {\r\n    return res.data.RESULT.url;\r\n  } catch {\r\n    alert(Error(res.ERROR_REASON));\r\n  }\r\n};\r\n\r\nconst getWonScore = async url => {\r\n  try {\r\n    const res = await axios\r\n      .create({\r\n        headers: { 'Content-Type': 'application/json' },\r\n      })\r\n      .get(url.replace('web', 'api').replace('/value', ''));\r\n    return parseWonScore(res.data.result.wonScore);\r\n  } catch (e) {\r\n    alert(Error(e));\r\n  }\r\n};\r\n\r\nconst parseWonScore = result => {\r\n  const unordered = {};\r\n  result.split(' ').forEach((value, index) => {\r\n    unordered[index + 1] = value.split('=').slice(-1)[0];\r\n  });\r\n  let ordered = Object.keys(unordered).map(key => {\r\n    return [key, unordered[key]];\r\n  });\r\n  ordered.sort((first, second) => {\r\n    return second[1] - first[1];\r\n  });\r\n  return [unordered, ordered[0][0], ordered[1][0]];\r\n};\r\n\r\nconst getAverageJobs = async (result1, result2) => {\r\n  try {\r\n    const res = await axios\r\n      .create({\r\n        headers: { 'Content-Type': 'application/json' },\r\n      })\r\n      .get('https://www.career.go.kr/inspct/api/psycho/value/jobs', {\r\n        params: { no1: result1, no2: result2 },\r\n      });\r\n    return res.data;\r\n  } catch (e) {\r\n    alert(Error(e));\r\n  }\r\n};\r\n\r\nconst getAverageMajors = async (result1, result2) => {\r\n  try {\r\n    const res = await axios\r\n      .create({\r\n        headers: { 'Content-Type': 'application/json' },\r\n      })\r\n      .get('https://www.career.go.kr/inspct/api/psycho/value/majors', {\r\n        params: { no1: result1, no2: result2 },\r\n      });\r\n    return res.data;\r\n  } catch (e) {\r\n    alert(Error(e));\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport Button from '../components/Button'\r\nimport ProgressBar from '../components/ProgressBar';\r\nimport ExampleQuestion from '../components/ExampleQuestion';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useRecoilState } from 'recoil';\r\nimport { questionState } from '../atom'\r\nimport { getQuestions } from '../api/career';\r\nimport { Outer, Inner } from '../styles/globalStyles';\r\n\r\nconst Example = () => {\r\n    const history = useHistory();\r\n    const [status, setStatus] = useState(true);\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [question, setQuestion] = useRecoilState(questionState);\r\n    const radioChange = () => {\r\n        setStatus(false)\r\n      };\r\n\r\n    const startTest = () => {\r\n        // api로 get 해서 recoil에 저장하고\r\n        // test로 넘기기\r\n        getQuestions().then(value => setQuestion(value))\r\n        history.push('/test');\r\n    }\r\n\r\n  return (\r\n    <Outer>\r\n      <Inner>\r\n      <ProgressBar percent={0} />\r\n      <h5>직업과 관련된 두개의 가치 중에서 자기에게 더 중요한 가치에 표시하세요.</h5>\r\n      <ExampleQuestion\r\n        Question=\"두개 가치 중에 자신에게 더 중요한 가치를 선택하세요.\"\r\n        value1=\"능력발휘\"\r\n        value2=\"자율성\"\r\n        group={0}\r\n        onClick={radioChange}\r\n      />\r\n      <Button name=\"검사시작\" disabled={status} onClick={startTest}/>\r\n      </Inner>\r\n    </Outer>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n","import RadioButton from './RadioButton';\r\n\r\nconst Question = ({\r\n  Question,\r\n  value1,\r\n  value2,\r\n  hiddenValue1,\r\n  hiddenValue2,\r\n  checked,\r\n  group,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h5 style={{ fontWeight: 'bold' }}>{'Q' + (group + 1) + '. ' + Question}</h5>\r\n      <RadioButton\r\n        value={value1}\r\n        group={group}\r\n        hiddenValue={hiddenValue1}\r\n        answer={checked === hiddenValue1 ? true : false}\r\n        onChange={onClick}\r\n      />\r\n      <RadioButton\r\n        value={value2}\r\n        group={group}\r\n        hiddenValue={hiddenValue2}\r\n        answer={checked === hiddenValue2 ? true : false}\r\n        onChange={onClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useRecoilValue, useRecoilState } from 'recoil';\r\nimport { questionState } from '../atom';\r\nimport Button from '../components/Button';\r\nimport ProgressBar from '../components/ProgressBar';\r\nimport Question from '../components/Question';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getResult } from '../api/career';\r\nimport { wonScoreState, jobState, majorState } from '../atom';\r\nimport { TestOuter, Inner } from '../styles/globalStyles';\r\n\r\nconst Test = () => {\r\n  const history = useHistory();\r\n  const questionValue = useRecoilValue(questionState);\r\n  const [, setWonScore] = useRecoilState(wonScoreState);\r\n  const [, setJob] = useRecoilState(jobState);\r\n  const [, setMajor] = useRecoilState(majorState);\r\n  const [answerList, setAnswerList] = useState(new Array(28).fill(0));\r\n  const [page, setPage] = useState(1);\r\n  const [status, setStatus] = useState(true);\r\n  const [progress, setProgress] = useState(0);\r\n  //const progress = parseInt((100 / 6) * page);\r\n\r\n  useEffect(() => {\r\n    setStatus(answerList.slice((page - 1) * 5, 5 * page).includes(0));\r\n  }, [answerList, page]);\r\n\r\n  const radioChange = (index, answer) => {\r\n    let newAnswerList = [...answerList];\r\n    // eslint-disable-next-line no-self-assign\r\n    newAnswerList = newAnswerList.map((c, i) => (i === index ? (c = answer) : (c = c)));\r\n    setAnswerList(newAnswerList);\r\n    setProgress(parseInt((newAnswerList.filter(elem => 0 !== elem).length * 100) / 28));\r\n  };\r\n\r\n  const previousPage = () => {\r\n    if (page > 1) setPage(page - 1);\r\n    else history.push('/example');\r\n  };\r\n\r\n  const nextPage = () => {\r\n    if (page < 6) {\r\n      setPage(page + 1);\r\n    } else getReport();\r\n  };\r\n\r\n  const getReport = () => {\r\n    // api로 post 해서 recoil에 저장하고\r\n    // result로 넘기기\r\n    const answers = answerList.map((value, index) => `B${index + 1}=${value}`).join(' ');\r\n    const body = {\r\n      qestrnSeq: '6',\r\n      trgetSe: '1002008',\r\n      name: '',\r\n      gender: '',\r\n      startDtm: 0,\r\n      answers,\r\n    };\r\n    getResult(body, storeWonscores, storeJobs, storeMajors, gotoFinish);\r\n  };\r\n\r\n  const gotoFinish = () => {\r\n    history.push('/finish');\r\n  }\r\n\r\n  const storeWonscores = wonScores => {\r\n    setWonScore(wonScores);\r\n  };\r\n\r\n  const storeJobs = jobs => {\r\n    setJob(jobs);\r\n  };\r\n\r\n  const storeMajors = majors => {\r\n    setMajor(majors);\r\n  };\r\n\r\n  const questions = () => {\r\n    return (\r\n      <>\r\n        {questionValue.slice((page - 1) * 5, 5 * page).map((data, index) => (\r\n          <Question\r\n            key={index + 5 * (page - 1)}\r\n            Question={data.question}\r\n            value1={data.answer01}\r\n            value2={data.answer02}\r\n            hiddenValue1={data.answerScore01}\r\n            hiddenValue2={data.answerScore02}\r\n            group={index + 5 * (page - 1)}\r\n            checked={answerList[index + 5 * (page - 1)]}\r\n            onClick={radioChange}\r\n          />\r\n        ))}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TestOuter>\r\n      <Inner>\r\n        <ProgressBar percent={progress} />\r\n        {questions()}\r\n        <Button name=\"이전\" disabled={false} onClick={previousPage} />\r\n        <Button name=\"다음\" disabled={status} onClick={nextPage} />\r\n      </Inner>\r\n    </TestOuter>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","export const interpretationNames = [\r\n  \"능력발휘\",\r\n  \"자율성\",\r\n  \"보수\",\r\n  \"안정성\",\r\n  \"사회적 인정\",\r\n  \"사회봉사\",\r\n  \"자기계발\",\r\n  \"창의성\",\r\n];\r\n\r\nexport const educationLevelNames = [\r\n  \"\",\r\n  \"중졸이하\",\r\n  \"고졸\",\r\n  \"전문대졸\",\r\n  \"대졸\",\r\n  \"대학원졸\",\r\n];\r\n\r\nexport const majorNames = [\r\n  \"계열무관\",\r\n  \"인문\",\r\n  \"사회\",\r\n  \"교육\",\r\n  \"공학\",\r\n  \"자연\",\r\n  \"의학\",\r\n  \"예체능\",\r\n];","import Button from '../components/Button';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { wonScoreState } from '../atom';\r\nimport { interpretationNames } from '../constants';\r\nimport { Outer, Inner } from '../styles/globalStyles';\r\n\r\nconst Finish = () => {\r\n  const wonScoreValue = useRecoilValue(wonScoreState);\r\n  const history = useHistory();\r\n  const gotoResult = () => {\r\n    history.push('/result');\r\n  };\r\n\r\n  const orderedWonscore = () => {\r\n    const unordered = wonScoreValue;\r\n    console.log(unordered);\r\n    let ordered = Object.keys(unordered).map(key => {\r\n      return [key, unordered[key]];\r\n    });\r\n    ordered.sort((first, second) => {\r\n      return second[1] - first[1];\r\n    });\r\n    console.log(ordered);\r\n    return [interpretationNames[ordered[0][0] - 1], interpretationNames[ordered[1][0] - 1]];\r\n  };\r\n\r\n  //이 부분 갑자기 안되서, api 부분 리팩토링하고 재도전 해보기!\r\n  const prevResult = () => {\r\n    const [first, second] = orderedWonscore();\r\n    return (\r\n      <>\r\n        <h4>\r\n          {first}와 {second}를 중요 가치로 생각하시는군요!\r\n        </h4>\r\n        <h4>결과보기 버튼으로, 가치관과 관련이 높은 직업들을 탐색하세요!</h4>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Outer>\r\n      <Inner>\r\n        <h1>🎉검사가 완료되었습니다!</h1>\r\n        <h5>\r\n          검사결과는 여러분이 직업을 선택할 때 상대적으로 어떠한 가치를 중요하게 생각하는지를\r\n          알려주고,\r\n        </h5>\r\n        <h5>중요 가치를 충족시켜줄 수 있는 직업에 대해 생각해 볼 기회를 제공합니다.</h5>\r\n        {prevResult()}\r\n        <Button name=\"결과보기\" disabled={false} onClick={gotoResult} />\r\n      </Inner>\r\n    </Outer>\r\n  );\r\n};\r\n\r\nexport default Finish;\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Chart = ({ labels, datas }) => {\r\n  const options = {\r\n    legend: {\r\n      display: true, // label 보이기 여부\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            min: 0, // y축 스케일에 대한 최소값 설정\r\n            stepSize: 1, // y축 그리드 한 칸당 수치\r\n          },\r\n        },\r\n      ],\r\n    },\r\n\r\n    // false : 사용자 정의 크기에 따라 그래프 크기가 결정됨.\r\n    // true : 크기가 알아서 결정됨.\r\n    maintainAspectRatio: true,\r\n  };\r\n  const data = {\r\n    // 각 막대별 라벨\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        borderWidth: 1, // 테두리 두께\r\n        data: datas, // 수치\r\n        backgroundColor: 'rgba(54, 162, 235, 0.2)', // 각 막대 색\r\n      },\r\n    ],\r\n  };\r\n  return <Bar data={data} options={options} width={100} height={50} />;\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\n\r\nconst UserTable = ({ userValue }) => {\r\n  return (\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">이름</th>\r\n          <th scope=\"col\">성별</th>\r\n          <th scope=\"col\">검사일</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{userValue.name}</td>\r\n          <td>{userValue.gender}</td>\r\n          <td>{userValue.createdAt}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import React from 'react';\r\n\r\nconst JobMajorTable = ({ col, values }) => {\r\n  const url = 'https://www.career.go.kr/cnet/front/base/job/jobView.do?SEQ='\r\n  const row = values[0];\r\n  const data = values[1];\r\n  const column = () => {\r\n    return (\r\n      <tr>\r\n        {col.map(elem => (\r\n          <td>{elem}</td>\r\n        ))}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const bodyData = () => {\r\n    return <tbody>\r\n      {row.map((value, index) => (\r\n        <tr>\r\n          <th scope=\"row\">{value}</th>\r\n          <td>\r\n          {data[index].map(elem => (\r\n            // eslint-disable-next-line jsx-a11y/anchor-has-content\r\n            // eslint-disable-next-line react/jsx-no-target-blank\r\n            <a href={url + elem[0]} target='_blank'>{elem[1]}</a>\r\n          ))}\r\n          </td>\r\n        </tr>\r\n      ))}\r\n      </tbody>;\r\n  };\r\n\r\n  return (\r\n    <table class=\"table table-bordered\">\r\n      <thead>{column()}</thead>\r\n      {bodyData()}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default JobMajorTable;\r\n","import Button from '../components/Button';\r\nimport { useRecoilValue, useResetRecoilState } from 'recoil';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { userState, wonScoreState, jobState, majorState } from '../atom';\r\nimport { interpretationNames, educationLevelNames, majorNames } from '../constants';\r\nimport Chart from '../components/Chart';\r\nimport UserTable from '../components/UserTable';\r\nimport JobMajorTable from '../components/JobMajorTable';\r\nimport { TestOuter, Inner } from '../styles/globalStyles';\r\n\r\nconst Finish = () => {\r\n  const userValue = useRecoilValue(userState);\r\n  const wonScoreValue = useRecoilValue(wonScoreState);\r\n  const jobValue = useRecoilValue(jobState);\r\n  const majorValue = useRecoilValue(majorState);\r\n  const resetUser = useResetRecoilState(userState);\r\n  const resetWonScore = useResetRecoilState(userState);\r\n  const resetJob = useResetRecoilState(userState);\r\n  const resetMajor = useResetRecoilState(userState);\r\n  const history = useHistory();\r\n  const jobMajorCol = ['분야', '직업'];\r\n  const gotoHome = () => {\r\n    resetUser();\r\n    resetWonScore();\r\n    resetJob();\r\n    resetMajor();\r\n    console.log(userValue, wonScoreValue, jobValue, majorValue);\r\n    history.push('/');\r\n  };\r\n\r\n  const parseJobMajor = (value, names) => {\r\n    let dict = { 0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [] };\r\n    let row = [];\r\n    let data = [];\r\n    value.forEach(elem => {\r\n      let temp = dict[elem[2]];\r\n      temp.push(elem.slice(0, 2));\r\n      dict[elem[2]] = temp;\r\n    });\r\n    for (const [key, value] of Object.entries(dict)) {\r\n      console.log(key, value);\r\n      if (value.length !== 0) {\r\n        row.push(names[key]);\r\n        data.push(value);\r\n      }\r\n    }\r\n    console.log(row);\r\n    console.log(data);\r\n    return [row, data];\r\n  };\r\n\r\n  return (\r\n    <TestOuter>\r\n      <Inner>\r\n        <h1>👍직업가치관검사 결과표📝</h1>\r\n        <UserTable userValue={userValue} />\r\n        <p>\r\n          직업가치관이란 직업을 선택할 때 영향을 끼치는 자신만의 믿음과 신념입니다. 따라서 여러분의\r\n          직업생활과 관련하여 포기하지 않는 무게중심의 역할을 한다고 볼 수 있습니다.\r\n          직업가치관검사는 여러분이 직업을 선택할 때 상대적으로 어떠한 가치를 중요하게 생각하는지를\r\n          알려줍니다. 또한 본인이 가장 중요하게 생각하는 가치를 충족시켜줄 수 있는 직업에 대해\r\n          생각해 볼 기회를 제공합니다.\r\n        </p>\r\n        <h3>직업가치관 결과</h3>\r\n        <Chart labels={interpretationNames} datas={Object.values(wonScoreValue).map(Number)} />\r\n        <h3 style={{marginTop: \"20px\"}}>가치관과 관련이 높은 직업</h3>\r\n        <h4 style={{backgroundColor: \"ivory\"}}>종사자 평균 학력별</h4>\r\n        <JobMajorTable col={jobMajorCol} values={parseJobMajor(jobValue, educationLevelNames)} />\r\n        <h4 style={{backgroundColor: \"ivory\"}}>종사자 평균 전공별</h4>\r\n        <JobMajorTable col={jobMajorCol} values={parseJobMajor(majorValue, majorNames)} />\r\n        <Button name=\"다시 검사하기\" disabled={false} onClick={gotoHome} />\r\n      </Inner>\r\n    </TestOuter>\r\n  );\r\n};\r\n\r\nexport default Finish;\r\n","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport './App.css';\r\nimport GlobalFonts from \"./styles/fonts/fonts\";\r\nimport GlobalStyle from './styles/globalStyles';\r\nimport Home from './routes/Home';\r\nimport Example from './routes/Example';\r\nimport Test from './routes/Test';\r\nimport Finish from './routes/Finish';\r\nimport Result from './routes/Result';\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <GlobalStyle />\r\n      <GlobalFonts />\r\n      <RecoilRoot>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/example\" component={Example} />\r\n        <Route exact path=\"/test\" component={Test} />\r\n        <Route exact path=\"/finish\" component={Finish} />\r\n        <Route exact path=\"/result\" component={Result} />\r\n      </RecoilRoot>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}